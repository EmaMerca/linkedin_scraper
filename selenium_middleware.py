# append this in the middlewares.py file generated by scrapy 

## ------------------------ SELENIUM MIDDLEWARE ----------------------------
from scrapy.http import HtmlResponse
from selenium.webdriver.support.ui import WebDriverWait
from selenium.common.exceptions import NoSuchElementException
from .selenium_request import SeleniumRequest
from selenium import webdriver
import time

PASSW = 'my_passw'
EMAIL = 'my@email'


class SeleniumMiddleware:
    """Scrapy middleware handling the requests using selenium.
    Forked from https://github.com/clemfromspace/scrapy-selenium/blob/develop/scrapy_selenium/middlewares.py"""

    def __init__(self, driver_name):
        """Initialize the selenium webdriver

        Parameters
        ----------
        driver_name: str
            The selenium ``WebDriver`` to use
        """
        if driver_name == 'chrome':
            self.driver = webdriver.Chrome()

        self.login()

    def login(self):
        import time
        self.driver.get("https://www.linkedin.com/login")
        username = self.driver.find_element('name', 'session_key')
        password = self.driver.find_element('name', 'session_password')
        username.send_keys(EMAIL)
        password.send_keys(PASSW)
        login_button = self.driver.find_element('class name', 'btn__primary--large')
        login_button.click()
        time.sleep(15)

    @classmethod
    def from_crawler(cls, crawler):
        """Initialize the middleware with the crawler settings"""

        driver_name = crawler.settings.get('SELENIUM_DRIVER_NAME')

        middleware = cls(driver_name=driver_name)

        crawler.signals.connect(middleware.spider_closed, signals.spider_closed)

        return middleware

    def click_exp_button_if_present(self):
        try:
            all_experience_button = self.driver.find_element('id', 'navigation-index-see-all-experiences')
            if all_experience_button:
                all_experience_button.click()
                time.sleep(1)
                return True
        except NoSuchElementException:
            return False

    def process_request(self, request, spider):
        """Process a request using the selenium driver if applicable"""

        if not isinstance(request, SeleniumRequest):
            return None

        self.driver.get(request.url)

        ## todo: remove
        time.sleep(1)
        self.click_exp_button_if_present()
        ##

        for cookie_name, cookie_value in request.cookies.items():
            self.driver.add_cookie(
                {
                    'name': cookie_name,
                    'value': cookie_value
                }
            )

        if request.wait_until:
            WebDriverWait(self.driver, request.wait_time).until(
                request.wait_until
            )

        if request.screenshot:
            request.meta['screenshot'] = self.driver.get_screenshot_as_png()

        if request.script:
            self.driver.execute_script(request.script)

        body = str.encode(self.driver.page_source)

        # Expose the driver via the "meta" attribute
        request.meta.update({'driver': self.driver})

        return HtmlResponse(
            self.driver.current_url,
            body=body,
            encoding='utf-8',
            request=request
        )

    def spider_closed(self):
        """Shutdown the driver when spider is closed"""

        self.driver.quit()

